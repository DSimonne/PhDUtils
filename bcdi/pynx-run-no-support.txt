# parameters
data = "S1_pynx_norm_128_400_256_1_1_1.npz"
mask = "S1_maskpynx_norm_128_400_256_1_1_1.npz"
data2cxi = True
#object = "pynx-cdi-input-S61-2018-06-07T11-33-51_LLK000.488.npz"
auto_center_resize = False #
#support= "/data/id01/inhouse/david/SIXS_Jan/Pt_Al2O3/Scripts/analysis/S1373_support_0.2_mode_avg3_apodize_blackman.npz"
#support_type = 'square' # (will be a sphere or cube in 3d)
#support_size = 20, 10, 20  # half-size of the initial support (radius for a sphere)
support_threshold = 0.23, 0.3 # pick a random number between these two numbers
support_only_shrink = False
support_update_period = 20
support_smooth_width_begin = 2
support_smooth_width_end = 1
support_post_expand = 1,-2,1
#mask_interp=8,2
#confidence_interval_factor_mask=0.5,1.2
#algorithm=(Sup*ER**20)**5 * PSF**100*RAAR**10 * (Sup*RAAR**20)**10 * PSF**100*ER**10 * (Sup*ER**10)**5 * PSF**100*RAAR**10 * (Sup*RAAR**20)**10 * (Sup*ER**10)**5 * (Sup*RAAR**20)**10
psf = True #False #
nb_raar = 1000
nb_hio = 400
nb_er = 300
nb_ml = 0

nb_run = 50
nb_run_keep = 10
zero_mask = auto # masked pixels will start from imposed 0 and then let free
# max_size = 256 
crop_output= 0 # set to 0 to avoid cropping the output in the .cxi
# if N > 0 it will crop to support range + N pixels

positivity = False # True
beta = 0.9
detwin = False # True # 
rebin = 1,1,1

# Generic parameters
detector_distance = 1.18 # in m 
pixel_size_detector = 55e-6   # eiger 75e-6, maxipix 55e-6
wavelength = 0.14586e-9
verbose = 100
output_format= 'cxi'  # 'npz' # 'cxi' #
live_plot = True
# gpu = "K20"
# gpu="M2090"
